searchState.loadedDescShard("aws_clients", 0, "To run tests, it required to run docker compose beforehand\nEntities\nValidate that all current expectations for all methods have\nValidate that all current expectations for all methods have\nCreate an <code>Expectation</code> for mocking the <code>put_collection_items</code> …\nCreate an <code>Expectation</code> for mocking the <code>put_unzipped_item</code> …\nCreate an <code>Expectation</code> for mocking the <code>put_unzipping_item</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nget date doc…\nthis is a helper function. if there is argument, this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new mock object with no expectations.\nput a collection item\nput a new collection item\nput a new collection item\nput unzipped item time is mill sec\nput unzipped item time is mill sec\ntime is mill sec\ntime is mill sec\nupdate years lookup\nHolds the stuff that is independent of the output type\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValidate this expectation’s matcher.\nForbid this expectation from ever being called.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nExpect this expectation to be called any number of times …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nHolds the stuff that is independent of the output type\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValidate this expectation’s matcher.\nForbid this expectation from ever being called.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nExpect this expectation to be called any number of times …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nHolds the stuff that is independent of the output type\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValidate this expectation’s matcher.\nForbid this expectation from ever being called.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nExpect this expectation to be called any number of times …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nCollection …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis is a S3 bucket name\ncreate a new item\nThe DynamoDB client\nS3 client to see the data check the storage/ready.d\nThe expiring time for the s3 pre-signed URL\nThe client for the standard bucket\nValidate that all current expectations for all methods have\nValidate that all current expectations for all methods have\ncheck if a key provided exists\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nget a date time as an argument and return the s3 …\nCreate a <code>Context</code> for mocking the …\nCalling the s3 bucket to get the pre-signed URL. see errors\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new mock object with no expectations.\nremove “/” from the string\nremove an object\ngets a s3 list object output and returns prefixes\nAdd “0” if the number is less than 9. The prefix of …\nHolds the stuff that is independent of the output type\nManages the context for expectations of static methods.\nExpectation type for methods that return a <code>&#39;static</code> type. …\nLike an <code>&amp;Expectation</code> but protected by a Mutex guard.  …\nVerify that all current expectations for this method are …\nCreate a new expectation for this method.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd this expectation to a <code>Sequence</code>.\nJust like <code>Expectation::in_sequence</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValidate this expectation’s matcher.\nForbid this expectation from ever being called.\nForbid this expectation from ever being called.\nJust like <code>Expectation::never</code>\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nJust like <code>Expectation::once</code>\nReturn a constant value from the <code>Expectation</code>\nJust like <code>Expectation::return_const</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nJust like <code>Expectation::return_const_st</code>\nSupply an <code>FnOnce</code> closure that will provide the return …\nJust like <code>Expectation::return_once</code>\nSingle-threaded version of <code>return_once</code>.  This is useful for\nJust like <code>Expectation::return_once_st</code>\nSupply a closure that will provide the return value for …\nJust like <code>Expectation::returning</code>\nSingle-threaded version of <code>returning</code>. Can be used when the …\nJust like <code>Expectation::returning_st</code>\nExpect this expectation to be called any number of times …\nRestrict the number of times that that this method may be …\nJust like <code>Expectation::times</code>\nSet matching criteria for this Expectation.\nJust like <code>Expectation::with</code>\nSet a matching function for this Expectation.\nJust like <code>Expectation::withf</code>\nSingle-threaded version of <code>withf</code>. Can be used when the …\nJust like <code>Expectation::withf_st</code>\nThe s3 client\nread data from environment value")